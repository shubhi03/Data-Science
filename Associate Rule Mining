Associate Rule Mining-involves the use of machine learning models to analyze data for patterns, or co-occurrence, in a database. It identifies frequent if-then associations, which are called association rules



import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori

dataset = [['Milk', 'Onion', 'Nutmeg', 'Kidney Beans', 'Eggs', 'Yogurt'],
['Dill', 'Onion', 'Nutmeg', 'Kidney Beans', 'Eggs', 'Yogurt'],
['Milk', 'Apple', 'Kidney Beans', 'Eggs'],['Milk', 'Unicorn', 'Corn', 'Kidney Beans', 'Yogurt'],
['Corn', 'Onion', 'Onion', 'Kidney Beans', 'Ice cream', 'Eggs']]

te = TransactionEncoder()
te_ary = te.fit(dataset).transform(dataset)



df = pd.DataFrame(te_ary, columns=te.columns_)


frequent_itemsets = apriori(df, min_support=0.6, use_colnames=True)

from mlxtend.frequent_patterns import association_rules

a_r = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.7)

rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.2)
rules = rules[['antecedents','consequents','support','confidence','lift']]

rules["antecedant_len"] = rules["antecedents"].apply(lambda x: len(x))

rules =rules[ (rules['antecedant_len'] >= 2) &(rules['confidence'] > 0.75) &(rules['lift'] > 1.2) ]

eggs_kbs = rules[rules['antecedents'] == {'Onion', 'Kidney Beans'}]


res = rules

res = res[['antecedents', 'consequents', 'support']]
